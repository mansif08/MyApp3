package DailyCalculator;

import java.util.Stack;

public class EvaluateString {
    public EvaluateString() {
    }

    public static double evaluate(String expression) {
        char[] tokens = expression.toCharArray();
        Stack<Double> values = new Stack();
        Stack<Character> ops = new Stack();

        for(int i = 0; i < tokens.length; ++i) {
            if (tokens[i] != ' ') {
                if (tokens[i] >= '0' && tokens[i] <= '9') {
                    StringBuffer sbuf = new StringBuffer();

                    while(i < tokens.length && tokens[i] >= '0' && tokens[i] <= '9') {
                        sbuf.append(tokens[i++]);
                    }

                    values.push(Double.parseDouble(sbuf.toString()));
                    --i;
                } else if (tokens[i] == '(') {
                    ops.push(tokens[i]);
                } else if (tokens[i] == ')') {
                    while((Character)ops.peek() != '(') {
                        values.push(applyOp((Character)ops.pop(), (Double)values.pop(), (Double)values.pop()));
                    }

                    ops.pop();
                } else if (tokens[i] == '+' || tokens[i] == '-' || tokens[i] == '*' || tokens[i] == '/') {
                    while(!ops.empty() && hasPrecedence(tokens[i], (Character)ops.peek())) {
                        values.push(applyOp((Character)ops.pop(), (Double)values.pop(), (Double)values.pop()));
                    }

                    ops.push(tokens[i]);
                }
            }
        }

        while(!ops.empty()) {
            values.push(applyOp((Character)ops.pop(), (Double)values.pop(), (Double)values.pop()));
        }

        return (Double)values.pop();
    }

    public static boolean hasPrecedence(char op1, char op2) {
        if (op2 != '(' && op2 != ')') {
            return op1 != '*' && op1 != '/' || op2 != '+' && op2 != '-';
        } else {
            return false;
        }
    }

    public static double applyOp(char op, double b, double a) {
        switch(op) {
        case '*':
            return a * b;
        case '+':
            return a + b;
        case ',':
        case '.':
        default:
            return 0.0D;
        case '-':
            return a - b;
        case '/':
            if (b == 0.0D) {
                throw new RuntimeException();
            } else {
                return a / (b * 1.0D);
            }
        }
    }
}
